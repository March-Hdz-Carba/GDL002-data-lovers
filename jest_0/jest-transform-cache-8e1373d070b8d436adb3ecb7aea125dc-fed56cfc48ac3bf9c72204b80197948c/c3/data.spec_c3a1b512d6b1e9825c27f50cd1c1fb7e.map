{"version":3,"sources":["data.spec.js"],"names":["require","POKEMON","pokemonGrassFilterMock","orderPokemonFilterDragonMock","pikachuMock","describe","it","expect","toBe","loversData","filPokeType","pokemon","toEqual","sortPoke","averCandy","findPokemon"],"mappings":"AAAAA,QAAQ,gBAAR;AACA,MAAMC,UAAUD,QAAQ,kCAAR,CAAhB;AACA,MAAME,yBAAyBF,QAAQ,uCAAR,CAA/B;AACA,MAAMG,+BAA+BH,QAAS,mDAAT,CAArC;AACA,MAAMI,cAAcJ,QAAS,kCAAT,CAApB;;AAEAK,SAAS,SAAT,EAAoB,MAAM;AACxBC,SAAG,qBAAH,EAA0B,MAAM;AAC9BC,mBAAO,OAAON,OAAd,EAAuBO,IAAvB,CAA4B,QAA5B;AACD,OAFD;AAGD,CAJD;;AAMAH,SAAS,aAAT,EAAwB,MAAM;AAC5BC,SAAI,sBAAJ,EAA2B,MAAM;AAC3BC,mBAAO,OAAOE,WAAWC,WAAzB,EAAsCF,IAAtC,CAA2C,UAA3C;AACL,OAFD;;AAIAF,SAAI,+CAAJ,EAAoD,MAAM;AACpDC,mBAAOE,WAAWC,WAAX,CAAuBT,QAAQU,OAA/B,EAAuC,OAAvC,CAAP,EAAwDC,OAAxD,CAAgEV,sBAAhE;AACL,OAFD;AAGD,CARD;;AAUAG,SAAS,UAAT,EAAqB,MAAM;AACzBC,SAAI,sBAAJ,EAA2B,MAAM;AAC3BC,mBAAO,OAAOE,WAAWI,QAAzB,EAAmCL,IAAnC,CAAwC,UAAxC;AACL,OAFD;;AAIAF,SAAI,8CAAJ,EAAmD,MAAM;AACnDC,mBAAO,OAAOE,WAAWI,QAAX,CAAqBJ,WAAWC,WAAX,CAAuBT,QAAQU,OAA/B,EAAuC,QAAvC,CAArB,EAAwE,KAAxE,CAAd,EAA8FH,IAA9F,CAAmG,QAAnG;AACL,OAFD;;AAIAF,SAAI,8EAAJ,EAAmF,MAAM;AACvFC,mBAAOE,WAAWI,QAAX,CAAqBJ,WAAWC,WAAX,CAAuBT,QAAQU,OAA/B,EAAuC,QAAvC,CAArB,EAAwE,KAAxE,CAAP,EAAuFC,OAAvF,CAA+FT,4BAA/F;AACH,OAFC;AAGD,CAZD;;AAcAE,SAAS,WAAT,EAAsB,MAAM;AAC1BC,SAAI,sBAAJ,EAA2B,MAAM;AAC3BC,mBAAO,OAAOE,WAAWK,SAAzB,EAAoCN,IAApC,CAAyC,UAAzC;AACL,OAFD;;AAIAF,SAAI,oBAAJ,EAA0B,MAAM;AAC1BC,mBAAOE,WAAWK,SAAX,CAAqBL,WAAWC,WAAX,CAAuBT,QAAQU,OAA/B,EAAuC,QAAvC,CAArB,CAAP,EAA+EH,IAA/E,CAAoF,IAApF;AACL,OAFD;AAGD,CARD;;AAUAH,SAAS,aAAT,EAAwB,MAAM;AAC5BC,SAAI,sBAAJ,EAA2B,MAAM;AAC3BC,mBAAO,OAAOE,WAAWM,WAAzB,EAAsCP,IAAtC,CAA2C,UAA3C;AACL,OAFD;;AAIAF,SAAI,gEAAJ,EAAqE,MAAM;AACzEC,mBAAOE,WAAWM,WAAX,CAAuBd,QAAQU,OAA/B,EAAuC,SAAvC,CAAP,EAA0DC,OAA1D,CAAkER,WAAlE;AACH,OAFC;AAGD,CARD","file":"data.spec.js","sourcesContent":["require('../src/data.js');\nconst POKEMON = require(\"../src/data/pokemon/pokemon.json\");\nconst pokemonGrassFilterMock = require(\"../src/data/pokemon/pokemonGrass.json\");\nconst orderPokemonFilterDragonMock = require (\"../src/data/pokemon/orderPokemonFilterDragon.json\");\nconst pikachuMock = require (\"../src/data/pokemon/pikachu.json\");\n\ndescribe('Pokemon', () => {\n  it('should be an object', () => {\n    expect(typeof POKEMON).toBe('object');\n  });\n});\n\ndescribe(\"filPokeType\", () => {\n  it (\"should be a function\",() => {\n        expect(typeof loversData.filPokeType).toBe('function');\n  });\n\n  it (\"should be a return an array when filter Grass\",() => {\n        expect(loversData.filPokeType(POKEMON.pokemon,\"Grass\")).toEqual(pokemonGrassFilterMock);\n  });\n});\n\ndescribe(\"sortPoke\", () => {\n  it (\"should be a function\",() => {\n        expect(typeof loversData.sortPoke).toBe('function');\n  });\n\n  it (\"should be return an array when I sort dragon\",() => {\n        expect(typeof loversData.sortPoke((loversData.filPokeType(POKEMON.pokemon,\"Dragon\")), 'a-z')).toBe('object');\n  });\n\n  it (\"should be return an array in order alphabetic information when I sort dragon\",() => {\n    expect(loversData.sortPoke((loversData.filPokeType(POKEMON.pokemon,\"Dragon\")), 'a-z')).toEqual(orderPokemonFilterDragonMock);\n});\n});\n\ndescribe(\"averCandy\", () => {\n  it (\"should be a function\",() => {\n        expect(typeof loversData.averCandy).toBe('function');\n  });\n\n  it (\"should be a number\", () => {\n        expect(loversData.averCandy(loversData.filPokeType(POKEMON.pokemon,\"Dragon\"))).toBe(62.5);\n  });\n});\n\ndescribe(\"findPokemon\", () => {\n  it (\"should be a function\",() => {\n        expect(typeof loversData.findPokemon).toBe('function');\n  });\n\n  it (\"should be return information about Pikachu if you find Pikachu\",() => {\n    expect(loversData.findPokemon(POKEMON.pokemon,\"Pikachu\")).toEqual(pikachuMock);\n});  \n});\n\n"]}